#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <unistd.h>

#define N 3
#define K 4
#define PORT 8888

void process_data(int data[][K]) {
    int even, odd, column;
    column=0;
    for (int j = 0; j < K; j++) {
        even = 0;
        odd = 0;
       
        for (int i = 0; i < N; i++) {
            if (data[i][j] % 2 == 0) {
                printf("data = %d",data[i][j]);
                even++;
            } else {
                odd++;
            }
        }

        if (even > odd) {
            for (int i = 0; i < N; i++) {
                data[i][j] = 0;
            }
        }
    }
}


int main(int argc, char const *argv[]) {
    int server_fd, new_socket, valread;
    struct sockaddr_in address;
    int addrlen = sizeof(address);
    int data[N][K];
    char buffer[1024] = {0};
    printf("\n serv Create socket");

    // Create socket
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("socket failed");
        exit(EXIT_FAILURE);
    }
printf("\n serv Set socket options");
    // Set socket options
    int opt = 1;
    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {
        perror("setsockopt");
        exit(EXIT_FAILURE);
    }
printf("\n serv Bind socket to port");
    // Bind socket to port
    address.sin_family = AF_INET; // AF_INET - ipv4
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);
    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
        perror("bind failed");
        exit(EXIT_FAILURE);
    }

    // Listen for incoming connections
    if (listen(server_fd, 3) < 0) {	//прослушивает подключения 3 пользователей
        perror("listen");
        exit(EXIT_FAILURE);
    }
printf("\n serv Accept incoming connections and process data...");
    // Accept incoming connections and process data
   while (1) {
        if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {
            perror("accept");
            exit(EXIT_FAILURE);
       // Read data from client
    valread = read(new_socket, buffer, 1024);
    memcpy(data, buffer, sizeof(data));
   
    // Process data
    process_data(data);
    

    // Send data back to client
    send(new_socket, data, sizeof(data), 0);

    // Clear buffer
    memset(buffer,0,sizeof(buffer));
}
printf("\n serv Send data back to client and Clear buffer");
return 0;
} 

return 0;
}
